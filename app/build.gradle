plugins {
    id 'com.android.application'
}

android {
    namespace 'com.example.myapplication'
    compileSdk 34

    def getGitBranch = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    def getGitHash = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--verify', 'HEAD', '--short'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    def getGitCommitCount = { branch ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--count', "${branch}"
            standardOutput = stdout
        }
        return stdout.toString().trim().toInteger()
    }

    def getVersionID = { ->
        def commitID = "${getGitHash()}"
        def branchName = "${getGitBranch()}"
        def vID = String.format("%.2f", getGitCommitCount(branchName).toDouble() / 100.0)
        // only if not on main branch
        if (branchName != "main") {
            return "v${vID}_${commitID}[${branchName}]"
        } else {
            return "v${vID}_${commitID}"
        }
    }

    def ApplicationName = "MyApplication"
    defaultConfig {
        applicationId "com.example.myapplication"
        minSdk 24
        targetSdk 34
        versionCode 1
        multiDexEnabled true
        versionCode 1
        versionName "${getVersionID()}"
        // NOTE: deprecated
        // setProperty("archivesBaseName", "${ApplicationName}-${getVersionID()}")

        ndk {
             // On x86 devices that run Android API 23 or above, if the application is targeted with API 23 or
             // above, FFMPEG lib might lead to runtime crashes or warnings.
             //noinspection ChromeOsAbiSupport
             abiFilters 'armeabi-v7a', 'arm64-v8a'
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    base {
        archivesName = "${ApplicationName}-${getVersionID()}"
    }

    def signingFile = "${ApplicationName}.signing"
    def signingFileFound = false
    // println "DEBUG: SIGNING CHECK for ${ApplicationName}.signing"
    if (new File("${signingFile}").exists()) {
        // println "DEBUG: SIGNING ENABLED"
        Properties props = new Properties()
        props.load(new FileInputStream("${ApplicationName}.signing"))
        if (new File(props['keystore']).exists()) {
            // println "DEBUG: Use key " + props['keyAlias'] + " from file " + props['keystore']
            signingConfigs {
                signedRelease {
                    storeFile file(props['keystore'])
                    storePassword props['keystore.password']
                    keyAlias props['keyAlias']
                    keyPassword props['keyPassword']
                }
            }
            signingFileFound = true
        } else {
            // println "DEBUG: Use key " + props['keyAlias'] + " from file " + props['keystore'] + ": no keystore!"
            signingFileFound = false
        }
    } else {
        // println "DEBUG: SIGNING DISABLED 1"
    }

    buildTypes {
        debug {
            versionNameSuffix ".${getGitHash()}-debug"
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            versionNameSuffix ".${getGitHash()}"
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        if (signingFileFound) {
            signedRelease {
                versionNameSuffix ".${getGitHash()}"
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.signedRelease
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }

    tasks.register('printAppName') {
        doLast {
            println "${ApplicationName}"
        }
    }
    tasks.register('printAppVersion') {
        doLast {
            println android.defaultConfig.versionName
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation 'androidx.navigation:navigation-fragment:2.7.6'
    implementation 'androidx.navigation:navigation-ui:2.7.6'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
