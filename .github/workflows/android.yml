name: Create release with APKs
on:
  workflow_dispatch:
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

jobs:
  build:
    name: Create release with APKs
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: "0"

    - name: Grant execute permission for gradlew
      run: chmod +x app/gradlew

    - name: Set up JDK 17
      uses: actions/setup-java@v4.0.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Create signing info
      env:
        JKS: ${{ secrets.JKS }}
        JKS_PWD: ${{ secrets.JKS_PWD }}
        JKS_KEY_ALIAS: ${{ secrets.JKS_KEY_ALIAS }}
        JKS_KEY_PWD: ${{ secrets.JKS_KEY_PWD }}
      if: ${{ env.JKS != '' }}
      run: |
        ApplicationName=$(cd app && ./gradlew -q printAppName)
        echo -n "${JKS}" | base64 --decode > ./app/${ApplicationName}.jks
        echo "keystore=${PWD}/app/${ApplicationName}.jks" > ./app/${ApplicationName}.signing
        echo "keystore.password=${JKS_PWD}" >> ./app/${ApplicationName}.signing
        echo "keyAlias=${JKS_KEY_ALIAS}" >> ./app/${ApplicationName}.signing
        echo "keyPassword=${JKS_KEY_PWD}" >> ./app/${ApplicationName}.signing

    - name: Create debug signing info
      env:
        DEBUGJKS: ${{ secrets.DEBUGJKS}}
      if: ${{ env.DEBUGJKS != '' }}
      run: |
        ApplicationName=$(cd app && ./gradlew -q printAppName)
        echo -n "${DEBUGJKS}" | base64 --decode > ./app/app/${ApplicationName}.debug.keystore
        echo "file ${PWD}/app/app/${ApplicationName}.debug.keystore saved"

    - name: Build Only Debug version with Gradle
      env:
        JKS: ${{ secrets.JKS }}
      if: ${{ env.JKS == '' }}
      run: cd app && ./gradlew assembleDebug

    - name: Build All versions with Gradle
      env:
        JKS: ${{ secrets.JKS }}
      if: ${{ env.JKS != '' }}
      run: cd app && ./gradlew --warning-mode all build

    - name: Display artifacts
      run: find . -name '*.apk'
      working-directory: .

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ver=$(cd app && ./gradlew -q printAppVersion)
        tag=release-$ver-$(date +%Y%m%d-%H%M%S)
        gh release create --latest --title ${tag} ${tag} $(find . -name '*.apk')

    #- name: Drop old releases
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  run: |
    #    # delete old relesses after lastest 10
    #    gh release list --limit 500|tail -n +10 \
    #      | cut -f3 \
    #      | while read release_tag; do \
    #      echo "release delete --cleanup-tag -y $release_tag"; \
    #      gh release delete --cleanup-tag -y "$release_tag"; \
    #      done
