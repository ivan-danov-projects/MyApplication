name: Create release with APKs
on:
  workflow_dispatch:
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

jobs:
  build:
    name: Create release with APKs
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.1
      with:
        fetch-depth: "0"
    - name: set up JDK 21
      uses: actions/setup-java@v4.0.0
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Create signing info
      id: create_signing
      if: ${{ env.JKS != '' }}
      run: |
        ApplicationName=$(./gradlew -q printAppName)
        echo -n "${JKS}" | base64 --decode > ./${ApplicationName}.jks
        echo "keystore=${PWD}/${ApplicationName}.jks" > ./${ApplicationName}.signing
        echo "keystore.password=${JKS_PWD}" >> ./${ApplicationName}.signing
        echo "keyAlias=${JKS_KEY_ALIAS}" >> ./${ApplicationName}.signing
        echo "keyPassword=${JKS_KEY_PWD}" >> ./${ApplicationName}.signing
      shell: bash
      env:
        JKS: ${{ secrets.JKS}}
        JKS_PWD: ${{ secrets.JKS_PWD}}
        JKS_KEY_ALIAS: ${{ secrets.JKS_KEY_ALIAS}}
        JKS_KEY_PWD: ${{ secrets.JKS_KEY_PWD}}

    - name: Build with Gradle
      run: ./gradlew --warning-mode all build

    - name: Display artifacts
      run: find . -name '*.apk'
      working-directory: .

    - name: Create Release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        ver=$(./gradlew -q printAppVersion)
        tag=release-$ver-$(date +%Y%m%d-%H%M%S)
        gh release create --latest \
          --title ${tag} ${tag} \
          $(find . -name '*.apk')
        # delete old relesses
        gh release list --limit 500|tail -n +10 \
          | cut -f3 \
          | while read release_tag; do \
          gh release delete --cleanup-tag -y "$release_tag" \
          done
